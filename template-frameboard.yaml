# import into Home Assistant's template configuration

# get data for hourly weather forecast, using default Met.no integration
- trigger:
    - platform: state
      entity_id: weather.home
    - platform: time_pattern
      hours: "/1"
    - platform: homeassistant
      event: start
  action:
    - service: weather.get_forecasts
      data:
        type: hourly
      target:
        entity_id: weather.home
      response_variable: hourly
  sensor:
    - name: Home Weather Forecast Hourly
      unique_id: home_weather_forecast_hourly
      state: "{{ now() }}"
      attributes:
        forecast: "{{ hourly['weather.home'].forecast }}"

# Add occupancy timeouts to my UniFi motion sensors, which don't have them
- trigger:
    platform: state
    entity_id: binary_sensor.dining_room_motion
    to: "on"
  binary_sensor:
    name: Dining Room motion with occupancy timeout
    state: "on"
    auto_off: "00:01:00"
- trigger:
    platform: state
    entity_id: binary_sensor.living_room_motion
    to: "on"
  binary_sensor:
    name: Living Room motion with occupancy timeout
    state: "on"
    auto_off: "00:01:00"
- trigger:
    platform: state
    entity_id: binary_sensor.conservatory_motion
    to: "on"
  binary_sensor:
    name: Conservatory motion with occupancy timeout
    state: "on"
    auto_off: "00:01:00"

# Use motion to decide if we should allow refreshing of the screen
- binary_sensor:
    - name: Dashboard Refresh Status
      unique_id: dashboard_refresh_status
      device_class: "occupancy"
      delay_off:
        minutes: 1
      state: >-
        {%- if states('binary_sensor.dining_room_motion_with_occupancy_timeout') == 'on' or states('binary_sensor.living_room_motion_with_occupancy_timeout') == 'on' or states('binary_sensor.conservatory_motion_with_occupancy_timeout') == 'on' %}
          on
        {%- else -%}
          off
        {%- endif -%}

# Create the data object for the dashboard
- trigger:
    platform: time_pattern
    minutes: "/1"
  sensor:
    - name: Frameboard Data
      state: "OK"
      attributes:

        weather_condition_now: >
          {% set cond_now = states('weather.home') %}
          {% if states('sun.sun') == 'below_horizon' %}
              {% if cond_now == 'sunny' %} night {% elif cond_now == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond_now }} {% endif %}
          {% else %}
              {{ cond_now }}
          {% endif %}

        weather_condition_0: >
          {% set cond0 = state_attr('sensor.home_weather_forecast_hourly', 'forecast')[0].condition %}
          {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
          {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
          {% set cond0_time = as_timestamp(state_attr('sensor.home_weather_forecast_hourly', 'forecast')[0].datetime) %}
          {% if cond0_time < next_rising and next_rising < next_setting %}
              {% if cond0 == 'sunny' %} night {% elif cond0 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond0 }} {% endif %}
          {% else %}
              {{ cond0 }}
          {% endif %}
        weather_temperature_0: >
          {{ state_attr('sensor.home_weather_forecast_hourly', 'forecast')[0].temperature | round }}
        weather_timestamp_0: >
          {{ as_timestamp(state_attr('sensor.home_weather_forecast_hourly', 'forecast')[0].datetime) | timestamp_custom('%H') | int }}

        weather_condition_1: >
          {% set cond1 = state_attr('sensor.home_weather_forecast_hourly', 'forecast')[1].condition %}
          {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
          {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
          {% set cond1_time = as_timestamp(state_attr('sensor.home_weather_forecast_hourly', 'forecast')[1].datetime) %}
          {% if cond1_time < next_rising and next_rising < next_setting %}
              {% if cond1 == 'sunny' %} night {% elif cond1 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond1 }} {% endif %}
          {% else %}
              {{ cond1 }}
          {% endif %}
        weather_temperature_1: >
          {{ state_attr('sensor.home_weather_forecast_hourly', 'forecast')[1].temperature | round }}
        weather_timestamp_1: >
          {{ as_timestamp(state_attr('sensor.home_weather_forecast_hourly', 'forecast')[1].datetime) | timestamp_custom('%H') | int }}

        weather_condition_2: >
          {% set cond2 = state_attr('sensor.home_weather_forecast_hourly', 'forecast')[2].condition %}
          {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
          {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
          {% set cond2_time = as_timestamp(state_attr('sensor.home_weather_forecast_hourly', 'forecast')[2].datetime) %}
          {% if cond2_time < next_rising and next_rising < next_setting %}
              {% if cond2 == 'sunny' %} night {% elif cond2 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond2 }} {% endif %}
          {% else %}
              {{ cond2 }}
          {% endif %}
        weather_temperature_2: >
          {{ state_attr('sensor.home_weather_forecast_hourly', 'forecast')[2].temperature | round }}
        weather_timestamp_2: >
          {{ as_timestamp(state_attr('sensor.home_weather_forecast_hourly', 'forecast')[2].datetime) | timestamp_custom('%H') | int }}

        weather_condition_3: >
          {% set cond3 = state_attr('sensor.home_weather_forecast_hourly', 'forecast')[3].condition %}
          {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
          {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
          {% set cond3_time = as_timestamp(state_attr('sensor.home_weather_forecast_hourly', 'forecast')[3].datetime) %}
          {% if cond3_time < next_rising and next_rising < next_setting %}
              {% if cond3 == 'sunny' %} night {% elif cond3 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond3 }} {% endif %}
          {% else %}
              {{ cond3 }}
          {% endif %}
        weather_temperature_3: >
          {{ state_attr('sensor.home_weather_forecast_hourly', 'forecast')[3].temperature | round }}
        weather_timestamp_3: >
          {{ as_timestamp(state_attr('sensor.home_weather_forecast_hourly', 'forecast')[3].datetime) | timestamp_custom('%H') }}
