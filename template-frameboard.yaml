# import into Home Assistant's template configuration

# get data for hourly/daily weather forecast, using default Met.no integration
- trigger:
    - platform: state
      entity_id: weather.home
    - platform: time_pattern
      hours: "/1"
    - platform: homeassistant
      event: start
  action:
    - service: weather.get_forecasts
      data:
        type: hourly
      target:
        entity_id: weather.home
      response_variable: hourly
  sensor:
    - name: Home Weather Forecast Hourly
      unique_id: home_weather_forecast_hourly
      state: "{{ now() }}"
      attributes:
        forecast: "{{ hourly['weather.home'].forecast }}"
- trigger:
    - platform: state
      entity_id: weather.home
    - platform: time_pattern
      hours: "/12"
    - platform: homeassistant
      event: start
  action:
    - service: weather.get_forecasts
      data:
        type: daily
      target:
        entity_id: weather.home
      response_variable: daily
  sensor:
    - name: Home Weather Forecast Daily
      unique_id: home_weather_forecast_daily
      state: "{{ now() }}"
      attributes:
        forecast: "{{ daily['weather.home'].forecast }}"

# Add occupancy timeouts to my UniFi motion sensors, which don't have them
- trigger:
    platform: state
    entity_id: binary_sensor.dining_room_motion
    to: "on"
  binary_sensor:
    name: Dining Room motion with occupancy timeout
    state: "on"
    auto_off: "00:01:00"
- trigger:
    platform: state
    entity_id: binary_sensor.living_room_motion
    to: "on"
  binary_sensor:
    name: Living Room motion with occupancy timeout
    state: "on"
    auto_off: "00:01:00"
- trigger:
    platform: state
    entity_id: binary_sensor.conservatory_motion
    to: "on"
  binary_sensor:
    name: Conservatory motion with occupancy timeout
    state: "on"
    auto_off: "00:01:00"

# Use motion to decide if we should allow refreshing of the screen
- binary_sensor:
    - name: Dashboard Refresh Status
      unique_id: dashboard_refresh_status
      device_class: "occupancy"
      delay_off:
        minutes: 1
      state: >-
        {%- if states('binary_sensor.dining_room_motion_with_occupancy_timeout') == 'on' or states('binary_sensor.living_room_motion_with_occupancy_timeout') == 'on' or states('binary_sensor.conservatory_motion_with_occupancy_timeout') == 'on' %}
          on
        {%- else -%}
          off
        {%- endif -%}

# Create the data object for the dashboard
- trigger:
    platform: time_pattern
    minutes: "/1"
  sensor:
    - name: Frameboard Data
      state: "OK"
      attributes:

        weather_condition_now: >
          {% set cond_now = states('weather.home') %}
          {% if states('sun.sun') == 'below_horizon' %}
              {% if cond_now == 'sunny' %} night {% elif cond_now == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond_now }} {% endif %}
          {% else %}
              {{ cond_now }}
          {% endif %}
        weather_sunrise: >
          {{ as_timestamp(state_attr('sun.sun', 'next_rising')) | timestamp_custom('%H:%M') }}
        weather_sunset: >
          {{ as_timestamp(state_attr('sun.sun', 'next_setting')) | timestamp_custom('%H:%M') }}
        weather_wind_speed: >
          {{ state_attr('sensor.home_weather_forecast_daily', 'forecast')[0].wind_speed | round(1) }}
        weather_wind_bearing: >
          {% set wind_bearing = state_attr('sensor.home_weather_forecast_daily', 'forecast')[0].wind_bearing %}
          {% if wind_bearing >= 337.5 or wind_bearing < 22.5 %}
              North
          {% elif wind_bearing >= 22.5 and wind_bearing < 67.5 %}
              North-east
          {% elif wind_bearing >= 67.5 and wind_bearing < 112.5 %}
              East
          {% elif wind_bearing >= 112.5 and wind_bearing < 157.5 %}
              South-east
          {% elif wind_bearing >= 157.5 and wind_bearing < 202.5 %}
              South
          {% elif wind_bearing >= 202.5 and wind_bearing < 247.5 %}
              South-west
          {% elif wind_bearing >= 247.5 and wind_bearing < 292.5 %}
              West
          {% elif wind_bearing >= 292.5 and wind_bearing < 337.5 %}
              North-west
          {% endif %}
        weather_precipitation: >
          {{ state_attr('sensor.home_weather_forecast_daily', 'forecast')[0].precipitation | round(1) }}
        weather_uv: >
          {{ state_attr('sensor.home_weather_forecast_daily', 'forecast')[0].uv_index | round(1) }}

        weather_condition_0: >
          {% set cond0 = state_attr('sensor.home_weather_forecast_hourly', 'forecast')[0].condition %}
          {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
          {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
          {% set cond0_time = as_timestamp(state_attr('sensor.home_weather_forecast_hourly', 'forecast')[0].datetime) %}
          {% if cond0_time < next_rising and next_rising < next_setting %}
              {% if cond0 == 'sunny' %} night {% elif cond0 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond0 }} {% endif %}
          {% else %}
              {{ cond0 }}
          {% endif %}
        weather_temperature_0: >
          {{ state_attr('sensor.home_weather_forecast_hourly', 'forecast')[0].temperature | round(1) }}
        weather_timestamp_0: >
          {{ as_timestamp(state_attr('sensor.home_weather_forecast_hourly', 'forecast')[0].datetime) | timestamp_custom('%H') | int }}

        weather_condition_1: >
          {% set cond1 = state_attr('sensor.home_weather_forecast_hourly', 'forecast')[1].condition %}
          {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
          {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
          {% set cond1_time = as_timestamp(state_attr('sensor.home_weather_forecast_hourly', 'forecast')[1].datetime) %}
          {% if cond1_time < next_rising and next_rising < next_setting %}
              {% if cond1 == 'sunny' %} night {% elif cond1 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond1 }} {% endif %}
          {% else %}
              {{ cond1 }}
          {% endif %}
        weather_temperature_1: >
          {{ state_attr('sensor.home_weather_forecast_hourly', 'forecast')[1].temperature | round(1) }}
        weather_timestamp_1: >
          {{ as_timestamp(state_attr('sensor.home_weather_forecast_hourly', 'forecast')[1].datetime) | timestamp_custom('%H') | int }}

        weather_condition_2: >
          {% set cond2 = state_attr('sensor.home_weather_forecast_hourly', 'forecast')[2].condition %}
          {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
          {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
          {% set cond2_time = as_timestamp(state_attr('sensor.home_weather_forecast_hourly', 'forecast')[2].datetime) %}
          {% if cond2_time < next_rising and next_rising < next_setting %}
              {% if cond2 == 'sunny' %} night {% elif cond2 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond2 }} {% endif %}
          {% else %}
              {{ cond2 }}
          {% endif %}
        weather_temperature_2: >
          {{ state_attr('sensor.home_weather_forecast_hourly', 'forecast')[2].temperature | round(1) }}
        weather_timestamp_2: >
          {{ as_timestamp(state_attr('sensor.home_weather_forecast_hourly', 'forecast')[2].datetime) | timestamp_custom('%H') | int }}

        weather_condition_3: >
          {% set cond3 = state_attr('sensor.home_weather_forecast_hourly', 'forecast')[3].condition %}
          {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
          {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
          {% set cond3_time = as_timestamp(state_attr('sensor.home_weather_forecast_hourly', 'forecast')[3].datetime) %}
          {% if cond3_time < next_rising and next_rising < next_setting %}
              {% if cond3 == 'sunny' %} night {% elif cond3 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond3 }} {% endif %}
          {% else %}
              {{ cond3 }}
          {% endif %}
        weather_temperature_3: >
          {{ state_attr('sensor.home_weather_forecast_hourly', 'forecast')[3].temperature | round(1) }}
        weather_timestamp_3: >
          {{ as_timestamp(state_attr('sensor.home_weather_forecast_hourly', 'forecast')[3].datetime) | timestamp_custom('%H') }}

        weather_condition_4: >
          {% set cond4 = state_attr('sensor.home_weather_forecast_hourly', 'forecast')[4].condition %}
          {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
          {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
          {% set cond4_time = as_timestamp(state_attr('sensor.home_weather_forecast_hourly', 'forecast')[4].datetime) %}
          {% if cond4_time < next_rising and next_rising < next_setting %}
              {% if cond4 == 'sunny' %} night {% elif cond4 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond4 }} {% endif %}
          {% else %}
              {{ cond4 }}
          {% endif %}
        weather_temperature_4: >
          {{ state_attr('sensor.home_weather_forecast_hourly', 'forecast')[4].temperature | round(1) }}
        weather_timestamp_4: >
          {{ as_timestamp(state_attr('sensor.home_weather_forecast_hourly', 'forecast')[4].datetime) | timestamp_custom('%H') }}

        collection_type: >
          {% if strptime(states('sensor.template_rubbish_recycling_next'), '%d/%m/%Y') < strptime(states('sensor.template_rubbish_refuse_next'), '%d/%m/%Y') %}
              Recycling
          {% else %}
              Rubbish
          {% endif %}
        collection_date: >
          {% if strptime(states('sensor.template_rubbish_recycling_next'), '%d/%m/%Y') < strptime(states('sensor.template_rubbish_refuse_next'), '%d/%m/%Y') %}
              {{ states('sensor.template_rubbish_recycling_next') }}
          {% else %}
              {{ states('sensor.template_rubbish_refuse_next') }}
          {% endif %}
        collection_day: >
          {% set today = today_at('00:00') %}
          {% set tomorrow = today + timedelta(days=1) %}
          {% set next_rubbish = strptime(states('sensor.template_rubbish_refuse_next'), '%d/%m/%Y').astimezone() %}
          {% set next_recycling = strptime(states('sensor.template_rubbish_recycling_next'), '%d/%m/%Y').astimezone() %}
          {% if next_rubbish < next_recycling %}
              {% set next_collection_date = next_rubbish %}
          {% else %}
              {% set next_collection_date = next_recycling %}
          {% endif %}

          {% if next_collection_date >= today and next_collection_date  < tomorrow %}
              Today
          {% elif next_collection_date >= tomorrow and next_collection_date < tomorrow + timedelta(days=1) %}
              Tomorrow
          {% else %}
              {{ next_collection_date | as_timestamp | timestamp_custom('%A') }}
          {% endif %}

        trains_disruption: >
          {% if states('binary_sensor.template_train_perturbation_sac_stp') == 'on' %}
              DISRUPTED
          {% endif %}
        trains_next_fast_scheduled: >
          {% set walking_time_mins = 18 %}
          {% set trains = state_attr('sensor.train_schedule_sac_stp', 'trains') %}
          {% set match = namespace(fast = None) %}
          {% for train in trains if not train.expected == 'Cancelled'%}
            {% set departure_time = as_timestamp(train.expected) %}
            {% if departure_time > (as_timestamp(now()) + 18 * 60) %}
              {% set arrival_time = as_timestamp(train.destinations[0].time_at_destination) %}
              {% set travel_time = arrival_time - departure_time %}
              {% if travel_time < (60 * 25) and match.fast == None %}
                {% set match.fast = train %}
              {% endif %}
            {% endif %}
          {% endfor %}
          {% if match.fast %}
            {{ as_timestamp(match.fast.scheduled) | timestamp_custom('%H:%M') }}
          {% endif %}
        trains_next_fast_expected: >
          {% set walking_time_mins = 18 %}
          {% set trains = state_attr('sensor.train_schedule_sac_stp', 'trains') %}
          {% set match = namespace(fast = None) %}
          {% for train in trains if not train.expected == 'Cancelled'%}
            {% set departure_time = as_timestamp(train.expected) %}
            {% if departure_time > (as_timestamp(now()) + 18 * 60) %}
              {% set arrival_time = as_timestamp(train.destinations[0].time_at_destination) %}
              {% set travel_time = arrival_time - departure_time %}
              {% if travel_time < (60 * 25) and match.fast == None %}
                {% set match.fast = train %}
              {% endif %}
            {% endif %}
          {% endfor %}
          {% if match.fast %}
            {{ as_timestamp(match.fast.expected) | timestamp_custom('%H:%M') }}
          {% endif %}
        trains_next_slow_scheduled: >
          {% set walking_time_mins = 18 %}
          {% set trains = state_attr('sensor.train_schedule_sac_stp', 'trains') %}
          {% set match = namespace(slow = None) %}
          {% for train in trains if not train.expected == 'Cancelled'%}
            {% set departure_time = as_timestamp(train.expected) %}
            {% if departure_time > (as_timestamp(now()) + 18 * 60) %}
              {% set arrival_time = as_timestamp(train.destinations[0].time_at_destination) %}
              {% set travel_time = arrival_time - departure_time %}
              {% if travel_time >= (60 * 25) and match.slow == None %}
                {% set match.slow = train %}
              {% endif %}
            {% endif %}
          {% endfor %}
          {% if match.slow %}
            {{ as_timestamp(match.slow.scheduled) | timestamp_custom('%H:%M') }}
          {% endif %}
        trains_next_slow_expected: >
          {% set walking_time_mins = 18 %}
          {% set trains = state_attr('sensor.train_schedule_sac_stp', 'trains') %}
          {% set match = namespace(slow = None) %}
          {% for train in trains if not train.expected == 'Cancelled'%}
            {% set departure_time = as_timestamp(train.expected) %}
            {% if departure_time > (as_timestamp(now()) + 18 * 60) %}
              {% set arrival_time = as_timestamp(train.destinations[0].time_at_destination) %}
              {% set travel_time = arrival_time - departure_time %}
              {% if travel_time >= (60 * 25) and match.slow == None %}
                {% set match.slow = train %}
              {% endif %}
            {% endif %}
          {% endfor %}
          {% if match.slow %}
            {{ as_timestamp(match.slow.expected) | timestamp_custom('%H:%M') }}
          {% endif %}
