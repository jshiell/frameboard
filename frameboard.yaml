esphome:
  name: "frameboard"
  on_boot:
      priority: 200.0
      then:
        - component.update: eink_display
        - wait_until:
            condition:
              lambda: 'return id(data_updated) == true;'
        - delay: 5s
        - logger.log: "Initial data received: refreshing display..."
        - lambda: 'id(initial_data_received) = true;'
        - script.execute: update_screen

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:

api:

ota:
  platform: esphome

button:
  - platform: shutdown
    name: "Shutdown"
  - platform: restart
    name: "Restart"
  - platform: template
    name: "Refresh Screen"
    entity_category: config
    on_press:
      - script.execute: update_screen

globals:
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: initial_data_received
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: recorded_display_refresh
    type: int
    restore_value: yes
    initial_value: '0'

script:
  - id: update_screen
    then:
      - lambda: 'id(data_updated) = false;'
      - component.update: eink_display
      - lambda: 'id(recorded_display_refresh) += 1;'
      - lambda: 'id(display_last_update).publish_state(id(homeassistant_time).now().timestamp);'

time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - if:
              condition:
                lambda: 'return id(data_updated) == true;'
              then:
                - if:
                    condition:
                      binary_sensor.is_on: dashboard_should_refresh
                    then:
                      - logger.log: "Sensor data updated and activity in home detected: Refreshing display..."
                      - script.execute: update_screen
                    else:
                      - logger.log: "Sensor data updated but no activity in home - skipping display refresh."
              else:
                - logger.log: "No sensors updated - skipping display refresh."

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: !secret frameboard_ap_ssid
    password: !secret frameboard_ap_password

font:
  - file: 'fonts/GothamRnd-Book.ttf'
    id: font_small_book
    size: 18
  - file: 'fonts/GothamRnd-Bold.ttf'
    id: font_large_bold
    size: 108
    glyphs: [' ', '-', '°', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.']
  - file: 'fonts/GothamRnd-Bold.ttf'
    id: font_medium_bold
    size: 30
    # glyphs: [' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'M', 'I', 'N']
  - file: 'fonts/GothamRnd-Bold.ttf'
    id: font_small_bold
    size: 18
    # glyphs: [' ', '-', '°', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'C', 'M', 'I', 'N']
  - file: 'fonts/GothamRnd-Bold.ttf'
    id: font_med_bold
    size: 36
    glyphs: [' ', ':', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_large
    size: 96
    glyphs: &mdi-glyphs # codepoints: https://pictogrammers.com/library/mdi/
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0F2F" # mdi-weather-cloudy-alert
      - "\U000F0E6E" # mdi-weather-cloudy-arrow-right
      - "\U000F0591" # mdi-weather-fog
      - "\U000F0592" # mdi-weather-hail
      - "\U000F0F30" # mdi-weather-hazy
      - "\U000F0898" # mdi-weather-hurricane
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0594" # mdi-weather-night
      - "\U000F0F31" # mdi-weather-night-partly-cloudy
      - "\U000F0595" # mdi-weather-partly-cloudy
      - "\U000F0F32" # mdi-weather-partly-lightning
      - "\U000F0F33" # mdi-weather-partly-rainy
      - "\U000F0F34" # mdi-weather-partly-snowy
      - "\U000F0F35" # mdi-weather-partly-snowy-rainy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0598" # mdi-weather-snowy
      - "\U000F0F36" # mdi-weather-snowy-heavy
      - "\U000F067F" # mdi-weather-snowy-rainy
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F0F37" # mdi-weather-sunny-alert
      - "\U000F14E4" # mdi-weather-sunny-off
      - "\U000F059A" # mdi-weather-sunset
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F0F38" # mdi-weather-tornado
      - "\U000F059D" # mdi-weather-windy
      - "\U000F059E" # mdi-weather-windy-variant
      - "\U000F044C" # mdi-recycle
      - "\U000F0A7A" # mdi-trash-can-outline
      - "\U000F073A" # mdi-cancel
      - "\U000F052C" # mdi-train
      - "\U000F1677" # mdi-snail
      - "\U000F018C" # mdi-compass-outline
      - "\U000F17FE" # mdi-sun-wireless
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_medium
    size: 36
    glyphs: *mdi-glyphs

binary_sensor:
  - platform: homeassistant
    entity_id: binary_sensor.dashboard_refresh_status
    id: dashboard_should_refresh

sensor:
  - platform: template
    name: "Display Last Update"
    device_class: timestamp
    entity_category: "diagnostic"
    id: display_last_update
    
  - platform: template
    name: "Recorded Display Refresh"
    accuracy_decimals: 0
    unit_of_measurement: "Refreshes"
    state_class: "total_increasing"
    entity_category: "diagnostic"
    lambda: 'return id(recorded_display_refresh);'
  
  - platform: wifi_signal
    name: "WiFi Signal Strength"
    id: wifisignal
    unit_of_measurement: "dBm"
    entity_category: "diagnostic"
    update_interval: 60s

  - platform: homeassistant
    entity_id: weather.home
    attribute: temperature
    id: weather_temperature
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_wind_speed
    id: weather_wind_speed
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_precipitation
    id: weather_precipitation
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_uv
    id: weather_uv
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_temperature_0
    id: weather_temperature_0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_temperature_1
    id: weather_temperature_1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_temperature_2
    id: weather_temperature_2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_temperature_3
    id: weather_temperature_3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_temperature_4
    id: weather_temperature_4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

text_sensor:
  - platform: homeassistant
    entity_id: weather.home
    id: weather_state
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_sunrise
    id: weather_sunrise
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_sunset
    id: weather_sunset
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_wind_bearing
    id: weather_wind_bearing
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_condition_now
    id: weather_condition_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_condition_0
    id: weather_condition_0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_timestamp_0
    id: weather_timestamp_0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_condition_1
    id: weather_condition_1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_timestamp_1
    id: weather_timestamp_1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_condition_2
    id: weather_condition_2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_timestamp_2
    id: weather_timestamp_2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_condition_3
    id: weather_condition_3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_timestamp_3
    id: weather_timestamp_3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_condition_4
    id: weather_condition_4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: weather_timestamp_4
    id: weather_timestamp_4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: collection_type
    id: collection_type
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: collection_date
    id: collection_date
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: collection_day
    id: collection_day
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: trains_disruption
    id: trains_disruption
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: trains_next_fast_scheduled
    id: trains_next_fast_scheduled
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: trains_next_fast_expected
    id: trains_next_fast_expected
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: trains_next_slow_scheduled
    id: trains_next_slow_scheduled
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.frameboard_data
    attribute: trains_next_slow_expected
    id: trains_next_slow_expected
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14

display:
  - platform: waveshare_epaper
    id: eink_display
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin:
      number: GPIO25
      inverted: true
    reset_pin: GPIO26
    reset_duration: 2ms
    model: 7.50inV2alt
    update_interval: never
    rotation: 90°
    lambda: |-
      std::map<std::string, std::string> weather_icon_map
        {
          {"clear-night", "\U000F0594"},
          {"cloudy", "\U000F0590"},
          {"cloudy-alert", "\U000F0F2F"},
          {"cloudy-arrow-right", "\U000F0E6E"},
          {"fog", "\U000F0591"},
          {"hail", "\U000F0592"},
          {"hazy", "\U000F0F30"},
          {"hurricane", "\U000F0898"},
          {"lightning", "\U000F0593"},
          {"lightning-rainy", "\U000F067E"},
          {"night", "\U000F0594"},
          {"night-partly-cloudy", "\U000F0F31"},
          {"partlycloudy", "\U000F0595"},
          {"partly-cloudy", "\U000F0595"},
          {"partly-lightning", "\U000F0F32"},
          {"partly-rainy", "\U000F0F33"},
          {"partly-snowy", "\U000F0F34"},
          {"partly-snowy-rainy", "\U000F0F35"},
          {"pouring", "\U000F0596"},
          {"rainy", "\U000F0597"},
          {"snowy", "\U000F0598"},
          {"snowy-heavy", "\U000F0F36"},
          {"snowy-rainy", "\U000F067F"},
          {"sunny", "\U000F0599"},
          {"sunny-alert", "\U000F0F37"},
          {"sunny-off", "\U000F14E4"},
          {"sunset", "\U000F059A"},
          {"sunset-down", "\U000F059B"},
          {"sunset-up", "\U000F059C"},
          {"tornado", "\U000F0F38"},
          {"windy", "\U000F059D"},
          {"windy-variant", "\U000F059E"},
        };
      std::map<std::string, std::string> collection_icon_map
        {
          {"Recycling", "\U000F044C"},
          {"Rubbish", "\U000F0A7A"},
        };

      // 'white' prints as black on the e-ink display
      auto colour_text = Color::WHITE;

      if (id(initial_data_received) == false) {
        it.printf(240, 390, id(font_small_bold), colour_text, TextAlign::TOP_CENTER, "WAITING FOR DATA");

      } else {
        it.printf(190, 94, id(font_mdi_large), colour_text, TextAlign::TOP_RIGHT, "%s", weather_icon_map[id(weather_condition_now).state.c_str()].c_str());
        it.printf(200, 94, id(font_large_bold), colour_text, TextAlign::TOP_LEFT, "%2.1f°", id(weather_temperature).state);

        it.printf(80, 218, id(font_small_book), colour_text, TextAlign::TOP_CENTER, "%s", id(weather_timestamp_0).state.c_str());
        it.printf(80, 242, id(font_mdi_medium), colour_text, TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_0).state.c_str()].c_str());
        it.printf(80, 290, id(font_small_bold), colour_text, TextAlign::TOP_CENTER, "%2.1f°", id(weather_temperature_0).state);

        it.printf(160, 218, id(font_small_book), colour_text, TextAlign::TOP_CENTER, "%s", id(weather_timestamp_1).state.c_str());
        it.printf(160, 242, id(font_mdi_medium), colour_text, TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_1).state.c_str()].c_str());
        it.printf(160, 290, id(font_small_bold), colour_text, TextAlign::TOP_CENTER, "%2.1f°", id(weather_temperature_1).state);

        it.printf(240, 218, id(font_small_book), colour_text, TextAlign::TOP_CENTER, "%s", id(weather_timestamp_2).state.c_str());
        it.printf(240, 242, id(font_mdi_medium), colour_text, TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_2).state.c_str()].c_str());
        it.printf(240, 290, id(font_small_bold), colour_text, TextAlign::TOP_CENTER, "%2.1f°", id(weather_temperature_2).state);

        it.printf(320, 218, id(font_small_book), colour_text, TextAlign::TOP_CENTER, "%s", id(weather_timestamp_3).state.c_str());
        it.printf(320, 242, id(font_mdi_medium), colour_text, TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_3).state.c_str()].c_str());
        it.printf(320, 290, id(font_small_bold), colour_text, TextAlign::TOP_CENTER, "%2.1f°", id(weather_temperature_3).state);

        it.printf(400, 218, id(font_small_book), colour_text, TextAlign::TOP_CENTER, "%s", id(weather_timestamp_4).state.c_str());
        it.printf(400, 242, id(font_mdi_medium), colour_text, TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_4).state.c_str()].c_str());
        it.printf(400, 290, id(font_small_bold), colour_text, TextAlign::TOP_CENTER, "%2.1f°", id(weather_temperature_4).state);

        it.printf(140, 340, id(font_mdi_medium), colour_text, TextAlign::TOP_RIGHT, "\U000F059C");
        it.printf(150, 350, id(font_small_bold), colour_text, TextAlign::TOP_LEFT, "%s", id(weather_sunrise).state.c_str());
        it.printf(330, 340, id(font_mdi_medium), colour_text, TextAlign::TOP_RIGHT, "\U000F059B");
        it.printf(340, 350, id(font_small_bold), colour_text, TextAlign::TOP_LEFT, "%s", id(weather_sunset).state.c_str());
        
        it.printf(140, 380, id(font_mdi_medium), colour_text, TextAlign::TOP_RIGHT, "\U000F059D");
        it.printf(150, 390, id(font_small_bold), colour_text, TextAlign::TOP_LEFT, "%2.1f km/h", id(weather_wind_speed).state);
        it.printf(330, 380, id(font_mdi_medium), colour_text, TextAlign::TOP_RIGHT, "\U000F018C");
        it.printf(340, 390, id(font_small_bold), colour_text, TextAlign::TOP_LEFT, "%s", id(weather_wind_bearing).state.c_str());
        
        it.printf(140, 420, id(font_mdi_medium), colour_text, TextAlign::TOP_RIGHT, "\U000F0597");
        it.printf(150, 430, id(font_small_bold), colour_text, TextAlign::TOP_LEFT, "%2.1f mm", id(weather_precipitation).state);
        it.printf(330, 420, id(font_mdi_medium), colour_text, TextAlign::TOP_RIGHT, "\U000F17FE");
        it.printf(340, 430, id(font_small_bold), colour_text, TextAlign::TOP_LEFT, "%2.1f", id(weather_uv).state);

        it.printf(130, 500, id(font_mdi_large), colour_text, TextAlign::TOP_CENTER, "%s", collection_icon_map[id(collection_type).state.c_str()].c_str());
        it.printf(130, 600, id(font_small_bold), colour_text, TextAlign::TOP_CENTER, "%s", id(collection_day).state.c_str());
        it.printf(130, 630, id(font_small_book), colour_text, TextAlign::TOP_CENTER, "%s", id(collection_date).state.c_str());

        if (strlen(id(trains_next_fast_scheduled).state.c_str()) > 0 || strlen(id(trains_next_fast_scheduled).state.c_str()) > 0) {
          it.printf(310, 500, id(font_mdi_medium), colour_text, TextAlign::TOP_RIGHT, "\U000F052C");
          it.printf(320, 500, id(font_med_bold), colour_text, TextAlign::TOP_LEFT, "%s", id(trains_next_fast_expected).state.c_str());
          if (id(trains_next_fast_expected).state != id(trains_next_fast_scheduled).state) {
            it.printf(280, 540, id(font_small_book), colour_text, TextAlign::TOP_LEFT, "Scheduled %s", id(trains_next_fast_scheduled).state.c_str());
          }
          
          it.printf(310, 570, id(font_mdi_medium), colour_text, TextAlign::TOP_RIGHT, "\U000F1677");
          it.printf(320, 570, id(font_med_bold), colour_text, TextAlign::TOP_LEFT, "%s", id(trains_next_slow_expected).state.c_str());
          if (id(trains_next_slow_expected).state != id(trains_next_slow_scheduled).state) {
            it.printf(280, 610, id(font_small_book), colour_text, TextAlign::TOP_LEFT, "Scheduled %s", id(trains_next_slow_scheduled).state.c_str());
          }
        } else {
          it.printf(350, 500, id(font_mdi_large), colour_text, TextAlign::TOP_CENTER, "\U000F073A");
          it.printf(350, 600, id(font_small_book), colour_text, TextAlign::TOP_CENTER, "No Trains");
        }
        it.printf(350, 640, id(font_small_bold), colour_text, TextAlign::TOP_CENTER, "%s", id(trains_disruption).state.c_str());

        char str[17];
        time_t currTime = id(homeassistant_time).now().timestamp;
        strftime(str, sizeof(str), "%H:%M", localtime(&currTime));
        it.printf(240, 710, id(font_small_book), colour_text, TextAlign::TOP_CENTER, "REFRESHED AT %s", str);
      }

captive_portal:
